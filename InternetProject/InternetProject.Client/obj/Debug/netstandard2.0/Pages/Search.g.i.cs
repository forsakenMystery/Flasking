#pragma checksum "E:\Code\InternetProject\InternetProject.Client\Pages\Search.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "e4660847ae468402fccfd1600c8d978b297f924b"
// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace InternetProject.Client.Pages
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Blazor;
    using Microsoft.AspNetCore.Blazor.Components;
    using System.Net.Http;
    using Microsoft.AspNetCore.Blazor.Layouts;
    using Microsoft.AspNetCore.Blazor.Routing;
    using InternetProject.Client;
    using InternetProject.Client.Shared;
    using Microsoft.AspNetCore.Blazor.Browser.Interop;
    using InternetProject.ViewModels;
    using InternetProject.Models;
    using static InternetProject.Client.Statics;
    [Microsoft.AspNetCore.Blazor.Layouts.LayoutAttribute(typeof(MainLayout))]

    [Microsoft.AspNetCore.Blazor.Components.RouteAttribute("/Search")]
    [Microsoft.AspNetCore.Blazor.Components.RouteAttribute("/Search/{name}")]
    public class Search : Microsoft.AspNetCore.Blazor.Components.BlazorComponent, IDisposable
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Blazor.RenderTree.RenderTreeBuilder builder)
        {
        }
        #pragma warning restore 1998
#line 288 "E:\Code\InternetProject\InternetProject.Client\Pages\Search.cshtml"
           
    [Parameter]
    string name { get; set; }
    bool nname = false, brand = false, dtkm = false, pr = false;
    string imgpath = string.Empty;
    string imgname = string.Empty;
    bool searchflag = false;
    SearchViewModel SVM = new SearchViewModel();
    string carName = string.Empty;
    int index = 0;
    int fueltype = -100;
    int carcalss = -100;
    int gbox = -100;
    int fh = -100;
    int hp = -100;
    int planned = -100;
    List<Ad> Ads;
    List<Ad> NewAds;
    int NewFinded = 0;
    IList<CarBrand> Brands;
    Guid _brandId;
    string BrandID { get => _brandId.ToString(); set => _brandId = Guid.Parse(value); }
    bool CanSearch = false;
    bool table = false;
    string GridOrTable = "Grid";
    protected override void OnInit()
    {
        SVM.OnPropertyChange += () =>
        {
            if (Ads != null) Ads.Clear();
            CanSearch = false;
        };
        SVM.Skip = -1;
        OnScroll += LoadMore;
        if (!string.IsNullOrEmpty(name))
        {
            var s = System.Text.Encoding.UTF8.GetString(Convert.FromBase64String(name));
            var p = s.Split(';');
            if (p[0] == "00")
            {
                _brandId = Guid.Parse(p[1]);
                imgpath = p[3];
                imgname = p[2];
            }
        }
    }
    async Task GetBrands()
    {
        if (Brands == null)
        {
            Brands = await Http.GetBrands();
        }
    }
    async Task SearchFunction()
    {
        searchflag = true;

        if (_brandId != Guid.Empty) SVM.Brand = _brandId;
        else SVM.Brand = null;

        SVM.CarName = carName;

        SVM.Skip = 0;

        if (fueltype != -100) SVM.Fuel = (FuelType)fueltype;
        else SVM.Fuel = null;

        if (carcalss != -100) SVM.CarClass = (CarClassType)carcalss;
        else SVM.CarClass = null;

        if (gbox != -100) SVM.Gearbox = (GearboxType)gbox;
        else SVM.Gearbox = null;

        if (fh == 0) SVM.FirstHanded = true;
        else if (fh == 1) SVM.FirstHanded = false;
        else SVM.FirstHanded = null;

        if (hp == 0) SVM.HavePic = true;
        else if (hp == 1) SVM.HavePic = false;
        else SVM.HavePic = null;

        if (planned == 0) SVM.Planned = true;
        else if (planned == 1) SVM.Planned = false;
        else SVM.Planned = null;

        SVM.PriceS = null;
        SVM.PriceE = null;
        var r = RegisteredFunction.Invoke<string>("GetSliderValue", "sliderPrice");
        if (r != "0;0")
        {
            var rr = r.Split(';');
            if (rr[0] != rr[1])
            {
                var HH = int.Parse(rr[0]);
                var LL = int.Parse(rr[1]);
                SVM.PriceS = (LL * 1000000) + 10000000;
                SVM.PriceE = (HH * 1000000) + 10000000;
            }
        }

        SVM.MYearStart = null;
        SVM.MYearEnd = null;
        r = RegisteredFunction.Invoke<string>("GetSliderValue", "sliderMYear");
        if (r != "0;0")
        {
            var rr = r.Split(';');
            if (rr[0] != rr[1])
            {
                var HH = int.Parse(rr[0]);
                var LL = int.Parse(rr[1]);
                SVM.MYearStart = LL + 1970;
                SVM.MYearEnd = HH + 1970;
            }
        }

        SVM.KME = null;
        SVM.KMS = null;
        r = RegisteredFunction.Invoke<string>("GetSliderValue", "sliderKM");
        if (r != "0;0")
        {
            var rr = r.Split(';');
            if (rr[0] != rr[1])
            {
                var HH = int.Parse(rr[0]);
                var LL = int.Parse(rr[1]);
                SVM.KMS = LL * 1000;
                SVM.KME = HH * 1000;
            }
        }
        if (NewAds == null && !CanSearch)
        {
            if (Ads == null) Ads = new List<Ad>();
            NewAds = await Http.SendJsonAsync<List<Ad>>(HttpMethod.Post, "api/Car/Search", SVM);
            Ads.AddRange(NewAds);
            NewFinded = NewAds.Count;
            NewAds = null;
            CanSearch = true;
            Toast($"{NewFinded} New result founded.", ToastType.Sucess);
        }
    }
    protected override void OnAfterRender()
    {

        RegisteredFunction.Invoke<bool>("MultiSliderActive");
        RegisteredFunction.Invoke<bool>("SliderBinder", "sliderPrice", "PriceRanges", 1000000, 10000000);
        RegisteredFunction.Invoke<bool>("SliderBinder", "sliderMYear", "MyearRanges", 1, 1970);
        RegisteredFunction.Invoke<bool>("SliderBinder", "sliderKM", "KMRanges", 1000, 0);
    }
    private void GridToTable()
    {
        table = !table;
        if (GridOrTable == "Grid") GridOrTable = "Table";
        else GridOrTable = "Grid";
    }
    async Task LoadMore()
    {
        if (SVM.Skip > -1)
        {
            SVM.Skip++;
            if (NewAds == null && NewFinded != 0)
            {
                if (Ads == null) Ads = new List<Ad>();
                NewAds = await Http.SendJsonAsync<List<Ad>>(HttpMethod.Post, "api/Car/Search", SVM);
                Ads.AddRange(NewAds);
                NewFinded = NewAds.Count;
                NewAds = null;
                Toast($"{NewFinded} New result founded.", ToastType.Sucess);

            }
        }

    }
    public void Dispose()
    {
        OnScroll -= LoadMore;
    }

#line default
#line hidden
        [global::Microsoft.AspNetCore.Blazor.Components.InjectAttribute] private HttpClient Http { get; set; }
    }
}
#pragma warning restore 1591

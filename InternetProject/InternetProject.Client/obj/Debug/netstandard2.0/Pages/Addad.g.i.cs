#pragma checksum "E:\Code\InternetProject\InternetProject.Client\Pages\Addad.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "92fc775180433d2edb7b8a58ef4c0c8f3233dde6"
// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace InternetProject.Client.Pages
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Blazor;
    using Microsoft.AspNetCore.Blazor.Components;
    using System.Net.Http;
    using Microsoft.AspNetCore.Blazor.Layouts;
    using Microsoft.AspNetCore.Blazor.Routing;
    using InternetProject.Client;
    using InternetProject.Client.Shared;
    using Microsoft.AspNetCore.Blazor.Browser.Interop;
    using InternetProject.Shared;
    using InternetProject.Models;
    using static InternetProject.Client.Statics;
    [Microsoft.AspNetCore.Blazor.Layouts.LayoutAttribute(typeof(MainLayout))]

    [Microsoft.AspNetCore.Blazor.Components.RouteAttribute("/add")]
    public class Addad : Microsoft.AspNetCore.Blazor.Components.BlazorComponent
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Blazor.RenderTree.RenderTreeBuilder builder)
        {
        }
        #pragma warning restore 1998
#line 226 "E:\Code\InternetProject\InternetProject.Client\Pages\Addad.cshtml"
           
    string Token;
    IList<CarBrand> Brands;
    IList<CarColor> Colors;
    Guid _brandId = Guid.Empty;
    string BrandID { get => _brandId.ToString(); set => _brandId = Guid.Parse(value); }
    Guid _colorId = Guid.Empty;
    string ColorID { get => _colorId.ToString(); set => _colorId = Guid.Parse(value); }
    string carName = string.Empty;
    int index = 0;
    int fueltype = 0;
    int carcalss = 0;
    int gbox = 0;
    int fh = -100;
    double km = 0;
    string ManDate;
    int Insurance = 1;
    string IED;
    int TechnicalInspection = 1;
    int PlanedPayment = 0;
    double TotalPrice = 0;
    double AdvancedPayment = 0;
    double InstallmentsPayment = 0;
    int InstallmentsCount = 0;
    string address;
    protected override void OnInit()
    {
        if (!IsLogin) UriHelper.NavigateTo("/");
        Token = GetCookie();
    }
    async Task GetBrands()
    {
        if (Brands == null)
        {
            Brands = await Http.GetBrands();
        }
    }
    async Task GetColors()
    {
        if (Colors == null)
        {
            Colors = await Http.GetJsonAsync<IList<CarColor>>("api/Car/Colors");
        }
    }
    string ffile = "file";
    string rec = string.Empty;
    async Task File()
    {
        if (_brandId == Guid.Empty)
        {
            Toast("Brand must be specified!!!", ToastType.Warning);
            return;
        }
        if (string.IsNullOrEmpty(carName))
        {
            Toast("Car name must be specified!!!", ToastType.Warning);
            return;
        }
        if (_colorId == Guid.Empty)
        {
            Toast("Color must be specified!!!", ToastType.Warning);
            return;
        }
        if (string.IsNullOrEmpty(ManDate) || !DateTime.TryParse(ManDate, out var MD))
        {
            Toast("Manufacturing Date must be specified!!!", ToastType.Warning);
            return;
        }
        if (Insurance == 0)
        {
            if (string.IsNullOrEmpty(IED) || !DateTime.TryParse(IED, out var ieddd))
            {
                Toast("Insurance Expiration Date must be specified!!!", ToastType.Warning);
                return;
            }
        }
        var ad = new Ad()
        {
            Address = address,
            AdTime = DateTime.Now,
            Car = new CarType()
            {
                BrandID = _brandId,
                CarClass = (CarClassType)carcalss,
                CarName = carName,
                Fuel = (FuelType)fueltype,
                Gearbox = (GearboxType)gbox
            },
            ColorID = _colorId,
            Expired = false,
            FirstHanded = (fh == 0) ? true : false,
            Insurance = (Insurance == 0) ? true : false,
            KM = km,
            ManufacturingDate = MD,
            OwnerID = Guid.Parse(GetCookie()),
            PlanedPayment = (PlanedPayment == 1) ? true : false,
            Price = TotalPrice,
            Verified = false,
            TechnicalInspection = (TechnicalInspection == 0) ? true : false

        };
        if (Insurance == 0) ad.InsuranceExpirationDate = DateTime.Parse(IED);
        if (PlanedPayment == 1)
        {
            ad.AdvancedPayment = AdvancedPayment;
            ad.InstallmentsCount = InstallmentsCount;
            ad.InstallmentsPayment = InstallmentsPayment;
        }
        if (reses != "em")
        {
            var imgs = reses.Split(';').Where(x => !string.IsNullOrEmpty(x)).ToList();
            List<Image> ims = new List<Image>();
            foreach (var item in imgs)
            {
                var img = new Image()
                {
                    Name = item
                };
                ims.Add(img);
            }
            ad.Images = ims;
        }
        if (string.IsNullOrEmpty(rec))
        {
            rec = RegisteredFunction.Invoke<string>("recaptchaValue");
            if (string.IsNullOrWhiteSpace(rec))
            {
                Toast("recaptcha", ToastType.Error);
                return;
            }
        }
        ad.Recaptcha = rec;
        //Http.DefaultRequestHeaders.Add("file", ffile);
        var res = await Http.SendJsonAsync<CheckSessionResult>(HttpMethod.Post, "api/Car/newcar", ad);
        if (!res.res)
        {
            if (res.Name == "WR") Toast("recaptcha !!!", ToastType.Error);
            else Toast("sth went wrong :(", ToastType.Error);
        }
        else UriHelper.NavigateTo("/AdDetailes/" + ToBase64(Guid.Parse(res.Name)));
    }
    string reses = "em";
    async Task Upload()
    {
        ffile = RegisteredFunction.Invoke<string>("GetFile");
        var req = new HttpRequestMessage();
        req.RequestUri = new Uri("/upload");
        req.Method = HttpMethod.Post;
        req.Content = new StringContent(ffile);
        var p = await Http.SendAsync(req);
        reses = p.Headers.First(x => x.Key == "file").Value.First();
    }
    bool rendered = false;
    protected override void OnAfterRender()
    {
        if (rendered) return;
        RegisteredFunction.Invoke<string>("InitFile", "fille");
        RegisteredFunction.Invoke<string>("recaptcha");
        rendered = true;
    }

#line default
#line hidden
        [global::Microsoft.AspNetCore.Blazor.Components.InjectAttribute] private Microsoft.AspNetCore.Blazor.Services.IUriHelper UriHelper { get; set; }
        [global::Microsoft.AspNetCore.Blazor.Components.InjectAttribute] private HttpClient Http { get; set; }
    }
}
#pragma warning restore 1591

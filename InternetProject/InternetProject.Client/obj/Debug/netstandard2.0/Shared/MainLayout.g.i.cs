#pragma checksum "E:\Code\InternetProject\InternetProject.Client\Shared\MainLayout.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "a00327b7369f515689676a6d564373e04fb5c4f7"
// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace InternetProject.Client.Shared
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Blazor;
    using Microsoft.AspNetCore.Blazor.Components;
    using System.Net.Http;
    using Microsoft.AspNetCore.Blazor.Layouts;
    using Microsoft.AspNetCore.Blazor.Routing;
    using InternetProject.Client;
    using InternetProject.Client.Shared;
    using InternetProject.Shared;
    using InternetProject.Models;
    using InternetProject.ViewModels;
    using static InternetProject.Client.Statics;
    public class MainLayout : BlazorLayoutComponent
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Blazor.RenderTree.RenderTreeBuilder builder)
        {
        }
        #pragma warning restore 1998
#line 138 "E:\Code\InternetProject\InternetProject.Client\Shared\MainLayout.cshtml"
           
    string cityID = string.Empty;
    string Cookie = string.Empty;
    CheckSessionResult CheckSession;
    CheckSessionResult res;
    LoginViewModel loginvm = new LoginViewModel();
    Account reg = new Account();
    string repass = string.Empty;
    IList<CityName> cities;
    protected override async Task OnInitAsync()
    {
        Cookie = GetCookie();
        if (Cookie != string.Empty)
        {
            CheckSession = await Http.GetJsonAsync<CheckSessionResult>("api/Account/session/" + Cookie);
            IsLogin = CheckSession.res;
            LoginName = CheckSession.Name;
            if (IsLogin) Toast($"Welcome {LoginName} !!!", ToastType.Sucess);
            else ClearCookie();
        }
    }
    async Task CitiesAsync()
    {
        if (cities == null)
            cities = await Http.GetJsonAsync<IList<CityName>>("api/Account/cities");
    }
    void ModalNone()
    {
        Modal("id01", ModalType.None);
        Modal("id02", ModalType.None);
    }
    async Task SignInAsync()
    {
        res = await Http.SendJsonAsync<CheckSessionResult>(HttpMethod.Post, "/api/Account/signin", loginvm);
        if (res.Name.Equals("Not Found"))
        {
            ModalNone();
            Toast("Wrong username or password!!!", ToastType.Error);
        }
        else
        {
            var ps = res.Name.Split(';');
            IsLogin = true;
            LoginName = ps[0];
            SetCookie(ps[1]);
            ModalNone();
            if (ps[2] == "T")
            {
                IsAdmin = true;
                Token = Guid.Parse(ps[3]);
            }
            Toast($"Welcome {LoginName} !!!", ToastType.Sucess);
        }
    }
    async Task SignUpAsync()
    {
        if (reg.Password == repass)
        {
            try
            {
                reg.CityID = Guid.Parse(cityID);
                res = await Http.SendJsonAsync<CheckSessionResult>(HttpMethod.Post, "/api/Account/signup", reg);
                SetCookie(res.Name);
                IsLogin = true;
                LoginName = reg.UserName;
                Toast("successfully registered!!!", ToastType.Sucess);
                ModalNone();
            }
            catch
            {
                Toast("invalide data", ToastType.Error);
            }

        }
        else Toast("password and repeated password mismatch", ToastType.Error);

    }
    async Task logout()
    {
        await Http.GetJsonAsync<CheckSessionResult>("api/Account/ClearSession/" + GetCookie());
        ClearCookie();
        IsLogin = false;
        LoginName = string.Empty;
        IsAdmin = false;
        Token = Guid.Empty;
        Toast("Loged Out!!!", ToastType.Warning);
    }
    void ShowSignUp()
    {
        Modal("id01", ModalType.None);
        Modal("id02", ModalType.Block);
    }
    void ShowSignIn()
    {
        Modal("id01", ModalType.Block);
        Modal("id02", ModalType.None);
    }

#line default
#line hidden
        [global::Microsoft.AspNetCore.Blazor.Components.InjectAttribute] private HttpClient Http { get; set; }
        [global::Microsoft.AspNetCore.Blazor.Components.InjectAttribute] private Microsoft.AspNetCore.Blazor.Services.IUriHelper UriHelper { get; set; }
    }
}
#pragma warning restore 1591
